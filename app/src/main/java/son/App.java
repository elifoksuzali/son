/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package son;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;



import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    
    
    public String getGreeting() {
        return "Hello world.";
    }

    public static Integer Hesapla(ArrayList<Integer> array, int sayi1, int sayi2,int sayi3){

        if(array == null){
            System.out.println("Dizi Boş");
        }
           
            //2 sayının çarpımını hesaplama formulu
            int sonuc =  (sayi1*sayi2*sayi3);
            array.add(sayi1);
            array.add(sayi2);
            array.add(sayi3);
            
            

        return sonuc;

    }
     public static void main(String[] args) {


        port(getHerokuAssignedPort());
        get("/", (req, res) -> "Hoşgeldiniz");
        post("/compute", (req, res) -> {

            int sayi1Input = Integer.parseInt(req.queryParams("sayi1")) ;
            int sayi2Input = Integer.parseInt(req.queryParams("sayi2")) ;
            int sayi3Input = Integer.parseInt(req.queryParams("sayi3")) ;


            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
                inputList.add(sayi1Input);
                inputList.add(sayi2Input);
                inputList.add(sayi3Input);
                
            System.out.println(inputList);
            int sayi1= inputList.get(0);
            int sayi2 = inputList.get(1);
            int sayi3 = inputList.get(2);
            
           
            int result = App.Hesapla(inputList, sayi1Input, sayi2Input,sayi3Input);


            Map<String, Integer> map = new HashMap<String, Integer>();
            map.put("result", result );
            map.put("sayi1", sayi1 );
            map.put("sayi2", sayi2 );
            map.put("sayi3", sayi3 );

            return new ModelAndView(map, "compute.mustache");

        }, new MustacheTemplateEngine());

        get("/compute",
                (rq, rs) -> {
                    Map<String, String> map = new HashMap<String, String>();
                    map.put("result", "Not calculated yet");
                    return new ModelAndView(map, "compute.mustache");
                },
                new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; // return default port if heroku-port isn't set (i.e. on localhost)
    }

}